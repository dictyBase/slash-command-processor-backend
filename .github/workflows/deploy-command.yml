name: deploy-command
on:
  workflow_dispatch:
    inputs:
      repository-name:
        description: "The name of the repository from which the slash command was dispatched"
        required: true
      repository-owner:
        description: "The owner of the repository from which the slash command was dispatched"
        required: true
      issue-number:
        description: "The issue number in which the slash command was made"
        required: true
      html-url:
        description: "URL where comment was created"
        required: true
      comment-id:
        description: "ID of comment with deploy command"
        required: true
      chart-name:
        description: "Name of Helm chart"
        required: true
      cluster:
        description: "The cluster to deploy to"
        required: true
      commit:
        description: "Commit ID to deploy"
        required: false
      branch:
        description: "Branch to deploy"
        required: false
jobs:
  prepare-deploy:
    runs-on: ubuntu-latest
    name: Prepare for deployment
    steps:
      - name: download and setup path for github actions binary
        run: |
          mkdir -p github-actions/bin
          curl -L -o github-actions/bin/actions https://github.com/dictybase-docker/github-actions/releases/download/v2.1.4/action_2.1.4_Linux_x86_64
          chmod +x github-actions/bin/actions
          echo "$GITHUB_WORKSPACE/github-actions/bin" >> $GITHUB_PATH
      - name: parse deploy command and set vars
        id: vars
        run: actions --log-level debug pcd -f ${GITHUB_EVENT_PATH}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ${{ github.event.inputs.repository-owner }}/${{ github.event.inputs.repository-name }}
          ref: ${{ steps.vars.outputs.ref }}
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2
      - name: cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.vars.outputs.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: docker build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: build/package/Dockerfile
          tags: dictybase/${{ github.event.inputs.repository-name }}:${{ steps.vars.outputs.image_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: prepare for deploy
        if: ${{ success() }}
        id: prepare_deploy
        uses: dictybase-docker/prepare-deploy@v2
        with:
          owner: ${{ github.event.inputs.repository-owner }}
          repo: ${{ github.event.inputs.repository-name }}
          cluster-name: ${{ github.event.inputs.cluster }}
          cluster-zone: "us-central1-a"
          namespace: dictybase
          chart-name: ${{ github.event.inputs.chart-name }}
          chart-path: dictybase/${{ github.event.inputs.chart-name }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          image-tag: ${{ steps.vars.outputs.image_tag }}
          ref: ${{ steps.vars.outputs.ref }}
          artifact: ${{ github.event.inputs.repository-name }}
          environment: ${{ github.event.inputs.cluster }}
  deploy:
    runs-on: ubuntu-latest
    needs: prepare-deploy
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download deployment artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.inputs.repository-name }}
      - name: download and setup path for github action binary
        run: |
          mkdir -p github-actions/bin
          curl -L -o github-actions/bin/actions https://github.com/dictybase-docker/github-actions/releases/download/v2.1.4/action_2.1.4_Linux_x86_64
          chmod +x github-actions/bin/actions
          echo "$GITHUB_WORKSPACE/github-actions/bin" >> $GITHUB_PATH
      - name: extract information from deployment payload
        id: deploy_info
        run: actions --log-level debug sdp -f deployment.json
      - name: set in_progress deployment status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.REPO_ACCESS_TOKEN }} --owner ${{ github.event.inputs.repository-owner }} -r ${{ github.event.inputs.repository-name }} ds --state in_progress  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: setup google cloud sdk
        uses: google-github-actions/setup-gcloud@master
        with:
          version: "354.0.0"
          project_id: ${{ secrets.DEVENV_PROJECT_ID }}
          service_account_key: ${{ secrets.DEVENV_SA_KEY }}
          export_default_credentials: true
      - name: set up helm
        uses: azure/setup-helm@v1
        with:
          version: "v2.16.12"
      - name: add dictybase helm repo
        run: helm init --client-only --stable-repo-url https://charts.helm.sh/stable && helm repo add dictybase https://dictybase-docker.github.io/kubernetes-charts
      - name: get gcloud credentials for k8s cluster
        run: gcloud container clusters get-credentials --project ${{ secrets.DEVENV_PROJECT_ID }} --zone ${{ steps.deploy_info.outputs.zone }} ${{ steps.deploy_info.outputs.cluster }}
      - name: deploy chart
        if: ${{ success() }}
        run: actions --log-level debug dc --name ${{ steps.deploy_info.outputs.chart }} --namespace ${{ steps.deploy_info.outputs.namespace }} --image-tag ${{ steps.deploy_info.outputs.image_tag }} --path ${{ steps.deploy_info.outputs.path }}
      - name: set successful deploy status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.REPO_ACCESS_TOKEN }} --owner ${{ github.event.inputs.repository-owner }} -r ${{ github.event.inputs.repository-name }} ds --state success  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: set unsuccessful deploy status
        if: ${{ failure() }}
        run: actions --log-level debug -t ${{ secrets.REPO_ACCESS_TOKEN }} --owner ${{ github.event.inputs.repository-owner }} -r ${{ github.event.inputs.repository-name }} ds --state error  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
  add-reaction:
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: ${{ github.event.inputs.repository-owner }}/${{ github.event.inputs.repository-name }}
          comment-id: ${{ github.event.inputs.comment-id }}
          reaction-type: hooray
